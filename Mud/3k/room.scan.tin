#CLASS {cRoomScan} {kill};
#CLASS {cRoomScan} {open};
#NOP **** Variables ****

#VAR {room} {};

#VAR {RoomScan[mob][under the control of]}{-1};
#VAR {RoomScan[mob][the Skeleton]}{-1};
#VAR {RoomScan[mob][the Zombie]}{-1};
#VAR {RoomScan[mob][the Valpur]}{-1};
#VAR {RoomScan[mob][the Ghast]}{-1};
#VAR {RoomScan[mob][the Manshi]}{-1};
#VAR {RoomScan[mob][the Bolwyn]}{-1};
#VAR {RoomScan[mob][the Greesh]}{-1};
#VAR {RoomScan[mob][the Wight]}{-1};
#VAR {RoomScan[mob][the Heucuva]}{-1};
#VAR {RoomScan[mob][the Tholen]}{-1};
#VAR {RoomScan[mob][the Bayen]}{-1};
#VAR {RoomScan[mob][the Quarin]}{-1};
#VAR {RoomScan[mob][the Mohrg]}{-1};
#VAR {RoomScan[mob][the Grimare]}{-1};
#VAR {RoomScan[mob][the Valithyn]}{-1};
#VAR {RoomScan[mob][esquire]}{-1};
#VAR {RoomScan[mob]['s]}{-1};
#VAR {RoomScan[mob][the packmule]}{-1};

#VAR {RoomScan[object][coins]}{1};
#VAR {RoomScan[object][phial]}{1};
#VAR {RoomScan[object][bag]}{1};
#VAR {RoomScan[object][black stone]}{-1};
#VAR {RoomScan[object][grafting]}{-1};
#VAR {RoomScan[object][departing]}{-1};
#VAR {RoomScan[object][devouring]}{-1};
#VAR {RoomScan[object][slow digestion]}{-1};
#VAR {RoomScan[object][quick digestion]}{-1};
#VAR {RoomScan[object][hunger]}{-1};
#VAR {RoomScan[object][fractures]}{-1};
#VAR {RoomScan[object][nullification]}{-1};
#VAR {RoomScan[object][obliquity]}{-1};
#VAR {RoomScan[object][fumbling]}{-1};
#VAR {RoomScan[object][fear]}{-1};
#VAR {RoomScan[object][departing]}{-1};
#VAR {RoomScan[object][empty]}{-1};
#VAR {RoomScan[object][-\d.]}{-1};

#NOP **** Triggers ****
#NOP ** brief no map

#NOP ** brief/verbose with map
#NOP #ACTION {{^(\S.{68})[?:\@|\+|\^|v|E].*}}
{
	#REGEXP {%1} {{(.*) \(([a-z,]*)\).*$}}
	{
		#VAR {room} {};
		#VAR {room[name]} {&2};
		#NOP handler_parse_room_exits {&3};
        event_raise {e_room_header};
	};
} {2};

#NOP *********** Aliases **************;

#ALIAS {handler_room_contents}
{
  #NOP %1;
  #LIST {temp[tokenized]} {create} {%2};
  #VAR {temp[item][id]} {$temp[tokenized][2]};
  #VAR {temp[item][name]} {$temp[tokenized][3]};
  #REPLACE {temp[tokenized][4]} {/} {;};
  #REPLACE {temp[tokenized][4]} {#N} {$temp[tokenized][2]};
  #LIST {temp[item][actions]} {create} {$temp[tokenized][4]};
  #LIST {room[contents][$temp[tokenized][1]]} {add} {{$temp[item]}};
  event_raise e_room_${temp[tokenized][1]} {$temp[item][id]} {$temp[item][name]} {$temp[item][actions]};
};
event_register e_mip_HAA h_room_contents handler_room_contents;
event_register e_mip_HAB h_room_contents handler_room_contents;

#NOP #ALIAS {handler_room_mob}
#NOP {
#NOP     #LIST {room[contents][npc]} {add} {{{name}{%2}{id}{%2}}};
#NOP     event_raise e_room_npc {%2} {%2};
#NOP };
#NOP event_register {e_ansiflag_M} {room.scan.tin} {handler_room_mob}; 
#NOP 
#NOP #ALIAS {handler_room_item}
#NOP {
#NOP     #LIST {room[contents][item]} {add} {{{name}{%2}{id}{%2}}};
#NOP     event_raise e_room_item {%2} {%2};
#NOP };
#NOP event_register {e_ansiflag_A} {room.scan.tin} {handler_room_item}; 
#NOP event_register {e_ansiflag_W} {room.scan.tin} {handler_room_item}; 
#NOP event_register {e_ansiflag_O} {room.scan.tin} {handler_room_item}; 
#NOP 
#NOP #ALIAS {handler_room_player}
#NOP {
#NOP     #LIST {room[contents][player]} {add} {{{name}{%2}{id}{%2}}};
#NOP     event_raise e_room_player {%2};
#NOP };
#NOP event_register {e_ansiflag_P} {room.scan.tin} {handler_room_player}; 

#ALIAS {handler_room_end}
{
  #NOP %1;
  #IF {&room[contents][player][] <= 0}
  {
    event_raise e_roomscan_end;
    #IF {"&RoomScan[commandqueue][1]" != "0"}
    {
      #FORALL {$RoomScan[commandqueue][%*]} 
      {
        &0
      };
      #UNVAR {RoomScan[commandqueue]};
    };
    #IF {&RoomScan[pause][] <= 0}
    {
      event_raise e_roomscan_finished;
    };
  }
  {
    event_raise e_roomscan_finished;
  };
};

#ALIAS {.HandlerRoomExits}
{
  #NOP %1;
  #IF {"$mip[last]" != "BAD"}
  {
    #VAR {room[exits]} {%2};
    #REPLACE {room[exits]} {,} {;};
  };
};
event_register {e_mip_DDD} {h_room_exits} {.HandlerRoomExits};

#ALIAS {.HandlerRoomName}
{
  #NOP %1;
  #VAR {room} {};      
  #REGEXP {%2} {{^(.*?)\s*\(([a-z\s,]*)\)\s*$}}
  {
    #VAR {room[name]} {&2};
  }
  {
    #VAR {room[name]} {%2};
  };  
  event_oneshot e_prompt h_room_enter {event_raise e_room_enter {#NOP %%1};};    
  event_oneshot e_prompt h_room_end handler_room_end;
};
#NOP event_register {e_mip_BAD} {h_room_name} {.HandlerRoomName};
event_register {e_ansiflag_R} {h_room_name} {.HandlerRoomName};

#ALIAS {handler_room_pickup}
{
  #NOP %1;
  
  #FORALL {$RoomScan[object][]}
  {
    #IF {"$RoomScan[break]" != "1"}
    {
      #REGEXP {%3} {{&0}}
      {
        #IF {"$RoomScan[object][&0]" == "-1"}
        {
          #UNVAR {RoomScan[commandbuffer]};
          #VAR {RoomScan[break]} {1};
        }
        {
          #IF {"$RoomScan[object][&0]" == "1"}
          {
            #VAR {RoomScan[commandbuffer]} {@fAutoGetCommand{%2}};
          }
          {
#NOP            #VAR {RoomScan[commandbuffer]} {$RoomScan[object][&0]};
                #FORMAT {RoomScan[commandbuffer]} {$RoomScan[object][&0]} {%3};
          };
        };
      };
    };
  };
  
  #IF {"$RoomScan[commandbuffer]" != ""}
  {
    #LIST {RoomScan[commandqueue]} {add} {$RoomScan[commandbuffer]};
  };
  #ELSEIF {"$RoomScan[break]" != "1" && "$flags[autopickup]" == "2"}
  {
    #LIST {RoomScan[commandqueue]} {add} {@fAutoGetCommand{%2}};
  };
  
  #UNVAR {RoomScan[break]};
  #UNVAR {RoomScan[commandbuffer]};
};

/* Returns all the commands to perform when getting an object */
#FUNCTION {fAutoGetCommand}
{
    #VAR {result} {#SEND {!get %0}};
    #IF {$auto[bag][status]}
    {
        #VAR {result} {${result};#SEND {!put %0 in bag};};
    };
};
auto {add} {bag} {} {} {};

#ALIAS {autopickup}
{
  #IF {"%1" == "off" || "%1" == "stop"}
  {
    #VAR {flags[autopickup]} {0};
    #ECHO {Auto Pickup Off};
    #RETURN;
  };
  #IF {"%1" == "min"} {#VAR {flags[autopickup]} {0};};
  #IF {"%1" == "full"} {#VAR {flags[autopickup]} {1};};

  #SWITCH {"$flags[autopickup]"}
  {
    #CASE {"0"}
    {
      #VAR {flags[autopickup]} {1};
      #ECHO {Auto Pickup Minimal};
    }
    #CASE {"1"}
    {
      #VAR {flags[autopickup]} {2};
      #ECHO {Auto Pickup Full};
    };
    #CASE {"2"}
    {
      #VAR {flags[autopickup]} {1};
      #ECHO {Auto Pickup Minimal};
    };
  };

  #IF {$flags[autopickup] > 0 }
  {
    event_register e_room_item h_auto_pickup handler_room_pickup;
  };
  #ELSE
  {
    event_remove_handler h_auto_pickup;
  };
};

autopickup min;
#CLASS {cRoomScan} {close};
