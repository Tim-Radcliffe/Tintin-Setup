#NOP Map Area/Room path finding

/* Find area map directory names that match the passed parameter */
#FUNCTION {fSearchArea}
{
    #IF {"%0" == ".."} {#RETURN {{1}{@fFileGetPath{$map[area][path]}}}};
    #SCRIPT {result} {find $path[areas] -type d -iregex ".*%0[^\/]*" -printf "%P\n"};
};

/* Find closest exit match to destination, or the next area closest to it */
#FUNCTION {fSearchLink}
{
    #NOP /* Check a destination was provided */;
    #IF {"%0" == ""} {#RETURN;};
    
    #UNVAR {result};

    #NOP /* Find all LINK rooms in current map */;
    #MAP list {roomname} {LINK: %*} {variable} {result[list]};
    
    #NOP /* No links found */;
    #IF {&result[list][] < 1} {#RETURN};

    #NOP /* Collect room names for all links */;
    #FOREACH {$result[list][]} {r}
    {

        #NOP /* Discard inaccessible rooms (distance -1) */;
        #IF {$result[list][$r] >= 0}
        {
            #VAR {result[list][$r][dist]} {$result[list][$r]};
            #MAP AT {$r} {#MAP GET ROOMNAME {result[list][$r][name]}};
            #REPLACE {result[list][$r][name]} {LINK: } {};
        };
    };
    
    #NOP /* Find links that closest match the destination path */;
    #VAR {result[match]} {%0};
    #WHILE {"$result[match]" != ""}
    {
        
        #UNVAR {result[matchlist]};
        #UNVAR {result[exactlist]};
        
        #NOP /* Check all links in the list to see if they match filter string */;
        #FOREACH {$result[list][]} {result[i]}
        {
            #NOP /* Match the current match string, saving any overlap */;
            #REGEXP {$result[list][$result[i]][name]} {{$result[match](|\/.*)$}}
            {
                #NOP /* Store matches based on how many nested areas away they are (count the overlapping areas) */;
                #VAR {result[overlap]} {&2};
                #REPLACE {result[overlap]} {/} {;};
                #LIST {result[nest]} {CREATE} {$result[overlap]};
                
                #VAR {result[matches][&result[nest][]][$result[i]]} {$result[list][$result[i]]};
                
            };
        };
        
        #NOP /* Set the matchlist to the closest list of matches (minimise the overlapping areas) */;
        #VAR {result[matchlist]} {$result[matches][*result[matches][+1]]};
       
        #IF {&result[matchlist][] == 1}
        {
            #NOP /* One match found - return matched room number */;
            #RETURN {*result[matchlist][+1]};
        };
        #ELSEIF {&result[matchlist][] > 1}
        {
            #NOP /* More than one match - stop matching, move to next stage */;
            #VAR {result[list]} {$result[matchlist]};
            #BREAK;
        };
        
        #NOP /* Trim the last level from destination match */;
        #REGEXP {$result[match]} {{(.*)\/[^\/]*$}}
        {
            #VAR {result[match]} {&2};
        }
        {
            #VAR {result[match]} {};
            #BREAK;
        };
    };
    
    #NOP /* Find closest link room to this room on current map */;
    #VAR {result[return]} {};
    #FOREACH {$result[list][]} {result[i]}
    {
        #IF {"$result[return]" == ""}
        {
            #VAR {result[return]} {$result[i]};
        };
        #ELSEIF {$result[list][$result[i]][dist] < $result[list][$result[return]][dist]}
        {
            #VAR {result[return]} {$result[i]};
        };
    };
    #RETURN {$result[return]};
};

/* Run to area specified (full area path). */
#ALIAS {.areaRun}
{
    #NOP %1;
    #IF {"%1" != "$map[area][path]"}
    {
        .mapRun {@fSearchLink{%1}};

        event_oneshot {e_map_area_enter} {map.search.tin} {#NOP %%1;.areaRun {%1};};
    };
};

/* User command to go to area. If one match found, goes straight there */
/* Otherwise offers a list of alternatives to chose from as macros     */
#ALIAS {.go}
{
    #NOP %1;
    #VAR {_goArea[list]} @fSearchArea{%0};
    #IF {&_goArea[list][] < 1}
    {
        #ECHO {No match found};
    };
    #ELSEIF {&_goArea[list][] == 1}
    {
        .areaRun {$_goArea[list][1]};
    };
    #ELSE
    {
        #ECHO {Please select from the list (0 to cancel):};
        #CLASS {cMapGotoMacros} {open};
        #MACRO {0}
        {
          #CLASS {cMapGotoMacros} {kill};
          #ECHO {Cancelled};
        };
        #ALIAS {.goMacro}
        {
          #MACRO {%%1}
          {
            #NOP delay added because ticker wouldn't add from macro for some reason;
            #DELAY {0.2} {.areaRun {%%2}};
            #CLASS {cMapGotoMacros} {kill};
          };
        };
        #FOREACH {$_goArea[list][]} {v}
        {
          #IF {$v < 27}
          {
            #FORMAT {_goArea[c]} {%a} {$v+96};
            .goMacro {$_goArea[c]} {$_goArea[list][$v]};
            #ECHO {$_goArea[c] : @fFileGetName{@fFileGetPath{$_goArea[list][$v]}}/@fFileGetName{$_goArea[list][$v]}};
          };
          #IF {$v == 27}
          {
            #ECHO {Further matches not shown.};
            #BREAK;
          };
        };
    };
};
