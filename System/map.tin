#VAR {map} {};
#VAR {map[dirs]} {{s}{n}{sw}{ne}{w}{e}{nw}{se}{n}{s}{ne}{sw}{e}{w}{se}{nw}{d}{u}{u}{d}};

#VAR {map[col]} {};
#VAR {map[col][visited]}      {<178>};
#VAR {map[col][unexplored]}   {<108>};
#VAR {map[col][investigate]}  {<048>};
#VAR {map[col][oddexits]}     {<068>};
#VAR {map[col][money]}        {<128>};
#VAR {map[col][interest]}     {<158>};
#VAR {map[col][danger]}       {<118>};
#VAR {map[col][black]}        {<000>};
#VAR {map[col][brown]}        {<238>};

#VAR {RoomType}
{
  {link}
  {
    {symbol} {<138>*}
    {colour} {${map[col][black]}}
  }
  {shop}
  {
    {symbol} {<138>%}
    {colour} {${map[col][money]}}
  }
  {atm}
  {
    {symbol} {<138>$}
    {colour} {${map[col][money]}}
  }
  {pub}
  {
    {symbol} {<138>P}
    {colour} {${map[col][money]}}
  }
  {food}
  {
    {symbol} {<138>F}
    {colour} {${map[col][money]}}
  }
  {stall}
  {
    {symbol} {<138>S}
    {colour} {${map[col][money]}}
  }
  {special}
  {
    {symbol} {<138>?}
    {colour} {${map[col][interest]}}
  }
  {danger}
  {
    {symbol} {<138>!}
    {colour} {${map[col][danger]}}
  }
  {portal}
  {
    {symbol} {<138>@}
    {colour} {${map[col][interest]}}
  }
  {guild}
  {
    {symbol} {<138>G}
    {colour} {${map[col][interest]}}
  }
  {road}
  {
    {symbol} {}
    {colour} {$map[col][brown]}
  }
  {note}
  {
    {symbol} {<138>?}
    {colour} {}  
  }
};

#EVENT {MAP ENTER MAP}
{
  #MAP FLAG STATIC ON;
  #VAR {map[edit]} {0};
  event_raise {e_map_enter};
  event_register {e_auto_move} {h_map_move} {handler_auto_move};
};

#EVENT {MAP EXIT MAP}
{
  event_raise {e_map_exit};
  event_remove_specific e_auto_move h_map_move;
};

#EVENT {MAP ENTER ROOM}
{
  #VAR {map[room]} {@fMapRoomInfo{%0}};

  #NOP Void rooms have roomflag binary 8 (1000). Skip them;
  #IF { @fEval{ $map[room][roomflags] & 8 } == 0 }
  {
    #VAR {map[lastroom]} {%1};
    #VAR {my[location][area]} {$map[area][path]};
    #VAR {my[location][roomvnum]} {$map[room][roomvnum]};
    event_raise {e_map_room_enter} {%0} {%1};
  };
};

#EVENT {MAP EXIT ROOM}
{
  #NOP Void rooms have roomflag binary 8 (1000). Skip them;
  #IF { @fEval{ $map[room][roomflags] & 8 } == 0 }
  {
    #VAR {map[nextroom]} {%1};
    event_raise {e_map_room_exit} {%0} {%1};
  };
};

#EVENT {END OF PATH}
{
  event_raise {e_map_path_end};
};

#ALIAS {.mapEdit}
{
  #IF {"$map[edit]" == "1"}
  {
    event_remove_specific {e_map_room_enter} {h_room_record} {.mapRoomRecord};
    #VAR {map[edit]} {0};
    #MAP FLAG STATIC ON;
    #ECHO {MAP : Not Editable};
    event_raise {e_map_edit} {0};
  };
  #ELSE
  {
    event_register {e_map_room_enter} {h_room_record} {.mapRoomRecord};
    #VAR {map[edit]} {1};
    #MAP FLAG STATIC OFF;
    #ECHO {MAP : Editable};
    event_raise {e_map_edit} {1};
  };
};

#ALIAS {.mapRefresh}
{
    #IF {"$map[file]" == ""} #RETURN;
    #NOP  #MATH {map[cols]} {$session[MapCols]-1};
#NOP  #MATH {map[rows]} {$session[ScreenRows]};
#NOP  #MAP MAP {${map[cols]}x${map[rows]}} {/tmp/map.txt} {a};
    event_raise {e_map_refresh};
};

#ALIAS {.mapLoad}
{
    #NOP %1;
    #IF {"%1" == ""}
    {
        #ECHO {You must define a path};
    };
    #ELSE
    {
        #VAR {_mL} {};
        #VAR {_mL[path]} {%1};
        #REGEX {%1} {{^(.*)/([^\/]*)$}} 
        {
            #VAR {_mL[area]} {&3};
        }
        {
            #VAR {_mL[area]} {%1};
        };

        #VAR {map[file]}        {$_mL[path]/$_mL[area].map};
        #VAR {map[area][path]}  {$_mL[path]};
        #VAR {map[area][name]}  {$_mL[area]};
        #MAP {read} {$path[areas]/$map[file]};

        #FORALL {$_mapVariable[]}
        {
            #UNVAR {&0};
        };
        #UNVAR {_mapVariable};        
        
        #IF {"@fMapResolvePath{..}" != ""}
        {
            #KILL {class} {%*@fMapResolvePath{..}/%*};
        };
       
        .file loadall {$path[areas]/${_mL[path]}/*.tin};

        #FORALL {$_mapVariable[]}
        {
            #VAR {&0} {$_mapVariable[&0]};
        };
        
        #IF {"%2" == ""}
        {
            #MAP GOTO 1;
        }
        #ELSE
        {
            #MAP GOTO %2;
        };
        #UNVAR {_mL};   
    };
};

/* Set a variable in the map area specific data file */
#ALIAS {.mapVariable}
{
    #NOP %1;
    #IF {"%1" == ""}
    {
        #ECHO {You must define a variable name};
        #RETURN;
    };
    #IF {"$map[file]" == ""}
    {
        #ECHO {Map not loaded};
        #RETURN;
    };
    #CLASS {$path[areas]/$map[area][path]/$map[area][name].data.tin} {OPEN};
    #VAR {_mapVariable[%1]} {%2};
    #CLASS {$path[areas]/$map[area][path]/$map[area][name].data.tin} {WRITE} {$path[areas]/$map[area][path]/$map[area][name].data.tin};
    #CLASS {$path[areas]/$map[area][path]/$map[area][name].data.tin} {CLOSE};
    #VAR {%1} {%2};
};

#ALIAS {.mapSave}
{
  #NOP %1;
  #IF {"$map[file]" == ""}
  {
    #ECHO {Path needed to save map}
  };
  #ELSE
  {
    #LOCAL {_mS} {@fFileCreateDir{@fFileGetPath{$path[areas]/$map[file]}}};
    #MAP {write} {$path[areas]/$map[file]};
    #ECHO {MAP: Saved};
  };
}

#ALIAS {.mapCreate}
{
  #NOP %1;
  #IF {"%1" == ""}
  {
    #ECHO {.mapCreate {/mud/wilderness/scary castle}};
  };
  #ELSE
  {
    #VAR {map[file]} {@fMapCreate{@fMapResolvePath{%1}}};
  };
};

#ALIAS {.mapCreateLink}
{
  #NOP %1;
  #IF {"%1" == ""}
  {
    #ECHO {.mapCreateLink (exit command) (area name) (room vnum)};
  };
  #ELSE
  {
    #VAR {_mAL} {};
    #VAR {_mAL[linkroom]} {@fMapGetVnum{%1}};
    #IF {"$_mAL[linkroom]" == ""}
    {
      #MAP DIG {%1} {NEW};
      #VAR {_mAL[linkroom]} {@fMapGetVnum{%1}};
    };
    #MAP AT $_mAL[linkroom] .mapRoom {link};
    #MAP AT $_mAL[linkroom] #MAP SET roomarea {@fMapResolvePath{%2}};
    #MAP AT $_mAL[linkroom] #MAP SET roomname {LINK: @fMapResolvePath{%2}};
    #MAP EXIT {%1} COMMAND {.mapLink {@fMapResolvePath{%2}} {%3} {%1};};
    #MAP EXITFLAG {%1} HIDE;
    .mapRefresh
    #ECHO {CREATING MAP LINK:};
    #ECHO {FROM: @fFileGetPath{$map[file]} @fMapGetVnum{}};
    #ECHO {TO  : @fMapResolvePath{%2} %3};
  };
};

#ALIAS {.mapLink}
{
  #NOP %1;
  #IF {"%3" != ""}
  {
    #SEND {!%3};
  };
  event_raise {e_map_area_leave} {$map[area][path]};
  #NOP Following command needs a delay or Tintin++ crashes;
  #DELAY {0.01} 
  {
    #IF {@fMapExists{%1}}
    {
      .mapLoad {%1};
      #MAP {goto} {%2};
    };
    #ELSE
    {
      #ECHO {CREATING MAP FOR LINK:};
      #ECHO {FROM: @fFileGetPath{$map[file]} @fMapGetVnum{}};
      #ECHO {TO  : @fMapResolvePath{%1} %2};    
      .mapCreate {%1};
      #MAP {goto} {%2};
    };
    event_raise {e_map_area_enter} {@fMapResolvePath{%1}};
  };
};

/*
  Exit which requires a trigger event
  {initial action} {trigger match string} {triggered action}
*/
#ALIAS {.mapTrigger}
{
  #NOP %1;
  #IF {"%0" == ""}
  {
    #ECHO {.mapTrigger {initial action} {trigger match string} {triggered action};};
  };
  .mapRun {pause};
  #ACTION {%2}
  {
    #IF {"%3" != ""}
    {
      %3;
    };
    .mapRun;
    #UNACTION {%2};
  } {1};
  #IF {"%1" != ""}
  {
    %1;
  };
}

#FUNCTION {fMapExists}
{
  #VAR {result} {@fFileExists{$path[areas]/@fMapResolvePath{%1}}};
};

#FUNCTION {fMapResolvePath}
{
  #IF {"%1" == ".."}
  {
    #RETURN {@fFileGetPath{@fFileGetPath{$map[file]}}};
  };
  #ELSE
  {
    #VAR {_fMRP[path]} {@fFileGetPath{%1}};
    #IF {"$_fMRP[path]" == "" && "@fStringContains{{%1}{$map[file]}}" != "1"}
    {
      #VAR {_fMRP[path]} {@fFileGetPath{$map[file]}};
    };
    #VAR {result} {$_fMRP[path]/@fFileGetName{%1}};
  };
};

#FUNCTION {fMapGetVnum}
{
  #NOP %1;
  #IF {"%1" == ""}
  {
    #MAP {get} {roomvnum} {result};
  };
  #ELSE
  {
    #MAP {get} {roomexits} {_fMGV};
    #VAR {result} {$_fMGV[%1]};
    #UNVAR {_fMGV};
  };
};

#FUNCTION {fMapCreate}
{
  #NOP %1;
  #VAR {_fMC} {};

  #REGEX {%0} {{^(.*)/([^\/]*)$}} 
  {
    #VAR {_fMC[path]} {&2};
    #VAR {_fMC[area]} {&3};
  };

  #VAR {_fMC[dir]} {$path[areas]/$_fMC[path]/$_fMC[area]};

  #IF {!@fFileExists{$_fMC[dir]}}
  {
    #LOCAL {null} {@fFileCreateDir{$_fMC[dir]}};
  };

  #VAR {_fMC[file]} {$_fMC[dir]/$_fMC[area].map};

  #IF {@fFileExists{$_fMC[file]}}
  {
    #MAP {read} {$_fMC[file]};
    #MAP {goto} {1};
  };
  #ELSE
  {
    #MAP {create} {500};
    #MAP {goto} {1};
    #MAP {write} {$_fMC[file]};
  };

  #VAR {map[file]} {$_fMC[path]/$_fMC[area]/$_fMC[area].map};
  #VAR {map[area][path]} {$_fMC[path]/$_fMC[area]};

  #VAR {result} {$_fMC[path]/$_fMC[area]/$_fMC[area].map};
  #UNVAR {_fMC};
}

/* .mapNote {room note text} */
#ALIAS {.mapNote}
{
  #NOP %1;
  #IF {"%0" != ""}
  {
    #VAR {map[room][roomnote][%0]} {};
    #MAP set {roomnote} {$map[room][roomnote]};
    #IF {"$map[room][roomsymbol]" == " " || "$map[room][roomsymbol]" == ""}
    {
        #VAR {map[room][roomsymbol]} {$RoomType[note][symbol]};
        #VAR {map[room][roomcolor]}  {$RoomType[note][colour]};
        #MAP set roomsymbol {$map[room][roomsymbol]};
        #MAP set roomcolor  {$map[room][roomcolor]};
    };
  };
};

/* .mapExitNote {exit} {exit note text} */
#ALIAS {.mapExitNote}
{
    #NOP %1;
    #IF {"%0" != ""}
    {
        #MAP EXIT {%1} GET {map[room][exit][%1]};
        #VAR {map[room][exit][%1][%2]} {};
        #MAP EXIT {%1} SET {$map[room][exit][%1]};
    };
};

#ALIAS {.mapFind}
{
  #MAP {list} {roomnote} {%*%1%*};
};

/* Repeatedly check the map looking for rooms that match the current room name/exits */
#ALIAS {.mapFindMe}
{
    #NOP /* Find all rooms that match the current room name */;
    #MAP {list} {roomname} {$room[name]} {variable} {_mFM[currRooms]};
 
    #NOP /* Keep the matches with the most matching room exits */;
    #FOREACH {$_mFM[currRooms][]} {_mFM[room]}
    {
        #MAP AT {$_mFM[room]} {#MAP GET ROOMEXITS {_mFM[mapExits]};};
        #LIST {_mFM[roomExits]} {create} {$room[exits]};
        #VAR {_mFM[exitMatch]} {0};
        #FORALL {$_mFM[roomExits][%*]}
        {
            #IF {&_mFM[mapExits][&0]}
            {
                #MATH {_mFM[exitMatch]} {$_mFM[exitMatch] + 1}; 
            };
        };
        #VAR {_mFM[matchRooms][$_mFM[exitMatch]][$_mFM[room]]} {$_mFM[mapExits]};
    };
    #VAR {_mFM[currRooms]} {$_mFM[matchRooms][-1]};
                       
    #UNVAR {_mFM[matchRooms]};
    #IF {"$_mFM[refRooms]" == ""} 
    {
        #VAR {_mFM[matchRooms]} {$_mFM[currRooms]};
    };
    #ELSEIF {&_mFM[currRooms][] > 0}
    {
        #FORALL {$_mFM[refRooms][]} 
        {
            #MAP AT {&0} {#MAP GET ROOMEXITS {_mFM[exits]};};
            #FORALL {$_mFM[exits][]}
            {
                #IF {"$_mFM[currRooms][$_mFM[exits][&&0]]" != ""}
                {
                    #VAR {_mFM[matchRooms][&0]} {$_mFM[currRooms][&0]};
                };
            };
        };
    };
	
    #IF {&_mFM[matchRooms][] == 1}
    {
        #ECHO {INFO: 1 match found - Located!};
        #MAP GOTO {*_mFM[matchRooms][+1]};
        #UNVAR {_mFM};
    };
    #ELSEIF {&_mFM[matchRooms][] > 1}
    {
        #ECHO {INFO: &_mFM[matchRooms][] matches - keep moving};
        #VAR {_mFM[refRooms]} {$_mFM[matchRooms]};
    };
    #ELSE
    {
        #ECHO {INFO: No Match Found};
        #UNVAR {_mFM};
    };
};

#ALIAS {.mapRoom}
{
  #IF {"$RoomType[%1]" != "" && "%1" != ""}
  {
    .mapNote %1;
    #MAP {set} {roomsymbol} {$RoomType[%1][symbol]};
    #MAP {set} {roomcolor}  {$RoomType[%1][colour]};
    .mapRefresh;
  };
  #ELSE
  {
    #SHOWME {Room Types:};
    #SHOWME {==========};
    #FORALL {$RoomType[]}
    {
      #SHOWME {$RoomType[&0][colour] [$RoomType[&0][symbol]$RoomType[&0][colour]]<099> : &0};
    };
  };
};

#ALIAS {.mapRoomSpecialExit}
{
  #NOP %1;
  #IF {"$map[specialexit][%2][%3]" != ""}
  {
    .mapRun {pause};
    #ACTION {$map[specialexit][%2][%3][trigger]}
    {
      #IF {"$map[specialexit][%2][%3][command]" != ""}
      {
        #SEND {!$map[specialexit][%2][%3][command]};
      };
      .mapRun;
      #UNACTION {$map[specialexit][%2][%3][trigger]};
    } {2};
  };
};
event_register {e_map_room_exit} {h_map_room_specialexit} {.mapRoomSpecialExit};

#ALIAS {.mapRoomRecord}
{
  #NOP %1;

  #IF {"$map[edit]" == "1"}
  {
    #IF {"$map[room][roomcolor]" == "$map[col][unexplored]" || "$map[room][roomcolor]" == "$map[col][investigate]"}
    {
      #MAP set roomcolor $map[col][visited];
    };
  };
};

#ALIAS {handler_auto_move}
{
  #IF {"$map[file]" == ""} #RETURN;
  #MAP move %2;
};

#FUNCTION {fMapRoomInfo}
{
  #IF {"%1" == ""}
  {
    #RETURN;
  };

  #FORALL {roomarea;roomdata;roomnote;roomname;roomdesc;roomsymbol;roomcolor;roomflags;roomterrain;roomvnum;roomexits}
  {
    #MAP AT %1 #MAP GET {&0} {result[&0]};
  };
  
  #FOREACH {$result[roomexits][]} {_fMRI[exit]}
  {
    #MAP AT %1 #MAP EXIT {$_fMRI[exit]} GET {result[exit][$_fMRI[exit]]};
  };
  
  #UNVAR {_fMRI};
};
